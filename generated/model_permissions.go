/*
 * ZeroTier Central API
 *
 * ZeroTier Central Network Management Portal API.<p>All API requests must have an API token header specified in the <code>Authorization: Bearer xxxxx</code> format.  You can generate your API key by logging into <a href=\"https://my.zerotier.com\">ZeroTier Central</a> and creating a token on the Account page.</p><p>eg. <code>curl -X GET -H \"Authorization: bearer xxxxx\" https://my.zerotier.com/api/network</code></p>
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Permissions struct for Permissions
type Permissions struct {
	// Authorize permission
	A *bool `json:"a,omitempty"`
	// Delete permission
	D *bool `json:"d,omitempty"`
	// Modify network settings permission
	M *bool `json:"m,omitempty"`
	// Read network settings permission
	R *bool `json:"r,omitempty"`
}

// NewPermissions instantiates a new Permissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissions() *Permissions {
	this := Permissions{}
	return &this
}

// NewPermissionsWithDefaults instantiates a new Permissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsWithDefaults() *Permissions {
	this := Permissions{}
	return &this
}

// GetA returns the A field value if set, zero value otherwise.
func (o *Permissions) GetA() bool {
	if o == nil || o.A == nil {
		var ret bool
		return ret
	}
	return *o.A
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetAOk() (*bool, bool) {
	if o == nil || o.A == nil {
		return nil, false
	}
	return o.A, true
}

// HasA returns a boolean if a field has been set.
func (o *Permissions) HasA() bool {
	if o != nil && o.A != nil {
		return true
	}

	return false
}

// SetA gets a reference to the given bool and assigns it to the A field.
func (o *Permissions) SetA(v bool) {
	o.A = &v
}

// GetD returns the D field value if set, zero value otherwise.
func (o *Permissions) GetD() bool {
	if o == nil || o.D == nil {
		var ret bool
		return ret
	}
	return *o.D
}

// GetDOk returns a tuple with the D field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetDOk() (*bool, bool) {
	if o == nil || o.D == nil {
		return nil, false
	}
	return o.D, true
}

// HasD returns a boolean if a field has been set.
func (o *Permissions) HasD() bool {
	if o != nil && o.D != nil {
		return true
	}

	return false
}

// SetD gets a reference to the given bool and assigns it to the D field.
func (o *Permissions) SetD(v bool) {
	o.D = &v
}

// GetM returns the M field value if set, zero value otherwise.
func (o *Permissions) GetM() bool {
	if o == nil || o.M == nil {
		var ret bool
		return ret
	}
	return *o.M
}

// GetMOk returns a tuple with the M field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetMOk() (*bool, bool) {
	if o == nil || o.M == nil {
		return nil, false
	}
	return o.M, true
}

// HasM returns a boolean if a field has been set.
func (o *Permissions) HasM() bool {
	if o != nil && o.M != nil {
		return true
	}

	return false
}

// SetM gets a reference to the given bool and assigns it to the M field.
func (o *Permissions) SetM(v bool) {
	o.M = &v
}

// GetR returns the R field value if set, zero value otherwise.
func (o *Permissions) GetR() bool {
	if o == nil || o.R == nil {
		var ret bool
		return ret
	}
	return *o.R
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetROk() (*bool, bool) {
	if o == nil || o.R == nil {
		return nil, false
	}
	return o.R, true
}

// HasR returns a boolean if a field has been set.
func (o *Permissions) HasR() bool {
	if o != nil && o.R != nil {
		return true
	}

	return false
}

// SetR gets a reference to the given bool and assigns it to the R field.
func (o *Permissions) SetR(v bool) {
	o.R = &v
}

func (o Permissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.A != nil {
		toSerialize["a"] = o.A
	}
	if o.D != nil {
		toSerialize["d"] = o.D
	}
	if o.M != nil {
		toSerialize["m"] = o.M
	}
	if o.R != nil {
		toSerialize["r"] = o.R
	}
	return json.Marshal(toSerialize)
}

type NullablePermissions struct {
	value *Permissions
	isSet bool
}

func (v NullablePermissions) Get() *Permissions {
	return v.value
}

func (v *NullablePermissions) Set(val *Permissions) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissions(val *Permissions) *NullablePermissions {
	return &NullablePermissions{value: val, isSet: true}
}

func (v NullablePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


