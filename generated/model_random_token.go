/*
 * ZeroTier Central API
 *
 * ZeroTier Central Network Management Portal API.<p>All API requests must have an API token header specified in the <code>Authorization: Bearer xxxxx</code> format.  You can generate your API key by logging into <a href=\"https://my.zerotier.com\">ZeroTier Central</a> and creating a token on the Account page.</p><p>eg. <code>curl -X GET -H \"Authorization: bearer xxxxx\" https://my.zerotier.com/api/network</code></p>
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RandomToken struct for RandomToken
type RandomToken struct {
	// Current time on server
	Clock *int32 `json:"clock,omitempty"`
	// hex encoded random bytes of the token
	Hex *string `json:"hex,omitempty"`
	// Random 32 character token
	Token *string `json:"token,omitempty"`
}

// NewRandomToken instantiates a new RandomToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomToken() *RandomToken {
	this := RandomToken{}
	return &this
}

// NewRandomTokenWithDefaults instantiates a new RandomToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomTokenWithDefaults() *RandomToken {
	this := RandomToken{}
	return &this
}

// GetClock returns the Clock field value if set, zero value otherwise.
func (o *RandomToken) GetClock() int32 {
	if o == nil || o.Clock == nil {
		var ret int32
		return ret
	}
	return *o.Clock
}

// GetClockOk returns a tuple with the Clock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomToken) GetClockOk() (*int32, bool) {
	if o == nil || o.Clock == nil {
		return nil, false
	}
	return o.Clock, true
}

// HasClock returns a boolean if a field has been set.
func (o *RandomToken) HasClock() bool {
	if o != nil && o.Clock != nil {
		return true
	}

	return false
}

// SetClock gets a reference to the given int32 and assigns it to the Clock field.
func (o *RandomToken) SetClock(v int32) {
	o.Clock = &v
}

// GetHex returns the Hex field value if set, zero value otherwise.
func (o *RandomToken) GetHex() string {
	if o == nil || o.Hex == nil {
		var ret string
		return ret
	}
	return *o.Hex
}

// GetHexOk returns a tuple with the Hex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomToken) GetHexOk() (*string, bool) {
	if o == nil || o.Hex == nil {
		return nil, false
	}
	return o.Hex, true
}

// HasHex returns a boolean if a field has been set.
func (o *RandomToken) HasHex() bool {
	if o != nil && o.Hex != nil {
		return true
	}

	return false
}

// SetHex gets a reference to the given string and assigns it to the Hex field.
func (o *RandomToken) SetHex(v string) {
	o.Hex = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RandomToken) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomToken) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RandomToken) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RandomToken) SetToken(v string) {
	o.Token = &v
}

func (o RandomToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Clock != nil {
		toSerialize["clock"] = o.Clock
	}
	if o.Hex != nil {
		toSerialize["hex"] = o.Hex
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableRandomToken struct {
	value *RandomToken
	isSet bool
}

func (v NullableRandomToken) Get() *RandomToken {
	return v.value
}

func (v *NullableRandomToken) Set(val *RandomToken) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomToken) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomToken(val *RandomToken) *NullableRandomToken {
	return &NullableRandomToken{value: val, isSet: true}
}

func (v NullableRandomToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


