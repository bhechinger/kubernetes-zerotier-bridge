/*
 * ZeroTier Central API
 *
 * ZeroTier Central Network Management Portal API.<p>All API requests must have an API token header specified in the <code>Authorization: Bearer xxxxx</code> format.  You can generate your API key by logging into <a href=\"https://my.zerotier.com\">ZeroTier Central</a> and creating a token on the Account page.</p><p>eg. <code>curl -X GET -H \"Authorization: bearer xxxxx\" https://my.zerotier.com/api/network</code></p>
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// NetworkMemberApiService NetworkMemberApi service
type NetworkMemberApiService service

type ApiDeleteNetworkMemberRequest struct {
	ctx _context.Context
	ApiService *NetworkMemberApiService
	networkID string
	memberID string
}


func (r ApiDeleteNetworkMemberRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.DeleteNetworkMemberExecute(r)
}

/*
 * DeleteNetworkMember Delete a network member
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param networkID ID of the network
 * @param memberID ID of the member
 * @return ApiDeleteNetworkMemberRequest
 */
func (a *NetworkMemberApiService) DeleteNetworkMember(ctx _context.Context, networkID string, memberID string) ApiDeleteNetworkMemberRequest {
	return ApiDeleteNetworkMemberRequest{
		ApiService: a,
		ctx: ctx,
		networkID: networkID,
		memberID: memberID,
	}
}

/*
 * Execute executes the request
 */
func (a *NetworkMemberApiService) DeleteNetworkMemberExecute(r ApiDeleteNetworkMemberRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkMemberApiService.DeleteNetworkMember")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/network/{networkID}/member/{memberID}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkID"+"}", _neturl.PathEscape(parameterToString(r.networkID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"memberID"+"}", _neturl.PathEscape(parameterToString(r.memberID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}

type ApiGetNetworkMemberRequest struct {
	ctx _context.Context
	ApiService *NetworkMemberApiService
	networkID string
	memberID string
}


func (r ApiGetNetworkMemberRequest) Execute() (Member, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.GetNetworkMemberExecute(r)
}

/*
 * GetNetworkMember Return an individual member on a network
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param networkID ID of the network
 * @param memberID ID of the member
 * @return ApiGetNetworkMemberRequest
 */
func (a *NetworkMemberApiService) GetNetworkMember(ctx _context.Context, networkID string, memberID string) ApiGetNetworkMemberRequest {
	return ApiGetNetworkMemberRequest{
		ApiService: a,
		ctx: ctx,
		networkID: networkID,
		memberID: memberID,
	}
}

/*
 * Execute executes the request
 * @return Member
 */
func (a *NetworkMemberApiService) GetNetworkMemberExecute(r ApiGetNetworkMemberRequest) (Member, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkMemberApiService.GetNetworkMember")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/network/{networkID}/member/{memberID}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkID"+"}", _neturl.PathEscape(parameterToString(r.networkID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"memberID"+"}", _neturl.PathEscape(parameterToString(r.memberID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiGetNetworkMemberListRequest struct {
	ctx _context.Context
	ApiService *NetworkMemberApiService
	networkID string
}


func (r ApiGetNetworkMemberListRequest) Execute() ([]Member, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.GetNetworkMemberListExecute(r)
}

/*
 * GetNetworkMemberList Returns a list of Members on the network.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param networkID ID of the network to return
 * @return ApiGetNetworkMemberListRequest
 */
func (a *NetworkMemberApiService) GetNetworkMemberList(ctx _context.Context, networkID string) ApiGetNetworkMemberListRequest {
	return ApiGetNetworkMemberListRequest{
		ApiService: a,
		ctx: ctx,
		networkID: networkID,
	}
}

/*
 * Execute executes the request
 * @return []Member
 */
func (a *NetworkMemberApiService) GetNetworkMemberListExecute(r ApiGetNetworkMemberListRequest) ([]Member, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkMemberApiService.GetNetworkMemberList")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/network/{networkID}/member"
	localVarPath = strings.Replace(localVarPath, "{"+"networkID"+"}", _neturl.PathEscape(parameterToString(r.networkID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiUpdateNetworkMemberRequest struct {
	ctx _context.Context
	ApiService *NetworkMemberApiService
	networkID string
	memberID string
	member *Member
}

func (r ApiUpdateNetworkMemberRequest) Member(member Member) ApiUpdateNetworkMemberRequest {
	r.member = &member
	return r
}

func (r ApiUpdateNetworkMemberRequest) Execute() (Member, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.UpdateNetworkMemberExecute(r)
}

/*
 * UpdateNetworkMember Modify a network member
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param networkID ID of the network
 * @param memberID ID of the member
 * @return ApiUpdateNetworkMemberRequest
 */
func (a *NetworkMemberApiService) UpdateNetworkMember(ctx _context.Context, networkID string, memberID string) ApiUpdateNetworkMemberRequest {
	return ApiUpdateNetworkMemberRequest{
		ApiService: a,
		ctx: ctx,
		networkID: networkID,
		memberID: memberID,
	}
}

/*
 * Execute executes the request
 * @return Member
 */
func (a *NetworkMemberApiService) UpdateNetworkMemberExecute(r ApiUpdateNetworkMemberRequest) (Member, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkMemberApiService.UpdateNetworkMember")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/network/{networkID}/member/{memberID}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkID"+"}", _neturl.PathEscape(parameterToString(r.networkID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"memberID"+"}", _neturl.PathEscape(parameterToString(r.memberID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.member == nil {
		executionError.error = "member is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.member
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
