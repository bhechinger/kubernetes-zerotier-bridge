/*
 * ZeroTier Central API
 *
 * ZeroTier Central Network Management Portal API.<p>All API requests must have an API token header specified in the <code>Authorization: Bearer xxxxx</code> format.  You can generate your API key by logging into <a href=\"https://my.zerotier.com\">ZeroTier Central</a> and creating a token on the Account page.</p><p>eg. <code>curl -X GET -H \"Authorization: bearer xxxxx\" https://my.zerotier.com/api/network</code></p>
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IPV6AssignMode struct for IPV6AssignMode
type IPV6AssignMode struct {
	Var6plane *bool `json:"6plane,omitempty"`
	Rfc4193 *bool `json:"rfc4193,omitempty"`
	Zt *bool `json:"zt,omitempty"`
}

// NewIPV6AssignMode instantiates a new IPV6AssignMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPV6AssignMode() *IPV6AssignMode {
	this := IPV6AssignMode{}
	return &this
}

// NewIPV6AssignModeWithDefaults instantiates a new IPV6AssignMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPV6AssignModeWithDefaults() *IPV6AssignMode {
	this := IPV6AssignMode{}
	return &this
}

// GetVar6plane returns the Var6plane field value if set, zero value otherwise.
func (o *IPV6AssignMode) GetVar6plane() bool {
	if o == nil || o.Var6plane == nil {
		var ret bool
		return ret
	}
	return *o.Var6plane
}

// GetVar6planeOk returns a tuple with the Var6plane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPV6AssignMode) GetVar6planeOk() (*bool, bool) {
	if o == nil || o.Var6plane == nil {
		return nil, false
	}
	return o.Var6plane, true
}

// HasVar6plane returns a boolean if a field has been set.
func (o *IPV6AssignMode) HasVar6plane() bool {
	if o != nil && o.Var6plane != nil {
		return true
	}

	return false
}

// SetVar6plane gets a reference to the given bool and assigns it to the Var6plane field.
func (o *IPV6AssignMode) SetVar6plane(v bool) {
	o.Var6plane = &v
}

// GetRfc4193 returns the Rfc4193 field value if set, zero value otherwise.
func (o *IPV6AssignMode) GetRfc4193() bool {
	if o == nil || o.Rfc4193 == nil {
		var ret bool
		return ret
	}
	return *o.Rfc4193
}

// GetRfc4193Ok returns a tuple with the Rfc4193 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPV6AssignMode) GetRfc4193Ok() (*bool, bool) {
	if o == nil || o.Rfc4193 == nil {
		return nil, false
	}
	return o.Rfc4193, true
}

// HasRfc4193 returns a boolean if a field has been set.
func (o *IPV6AssignMode) HasRfc4193() bool {
	if o != nil && o.Rfc4193 != nil {
		return true
	}

	return false
}

// SetRfc4193 gets a reference to the given bool and assigns it to the Rfc4193 field.
func (o *IPV6AssignMode) SetRfc4193(v bool) {
	o.Rfc4193 = &v
}

// GetZt returns the Zt field value if set, zero value otherwise.
func (o *IPV6AssignMode) GetZt() bool {
	if o == nil || o.Zt == nil {
		var ret bool
		return ret
	}
	return *o.Zt
}

// GetZtOk returns a tuple with the Zt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPV6AssignMode) GetZtOk() (*bool, bool) {
	if o == nil || o.Zt == nil {
		return nil, false
	}
	return o.Zt, true
}

// HasZt returns a boolean if a field has been set.
func (o *IPV6AssignMode) HasZt() bool {
	if o != nil && o.Zt != nil {
		return true
	}

	return false
}

// SetZt gets a reference to the given bool and assigns it to the Zt field.
func (o *IPV6AssignMode) SetZt(v bool) {
	o.Zt = &v
}

func (o IPV6AssignMode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Var6plane != nil {
		toSerialize["6plane"] = o.Var6plane
	}
	if o.Rfc4193 != nil {
		toSerialize["rfc4193"] = o.Rfc4193
	}
	if o.Zt != nil {
		toSerialize["zt"] = o.Zt
	}
	return json.Marshal(toSerialize)
}

type NullableIPV6AssignMode struct {
	value *IPV6AssignMode
	isSet bool
}

func (v NullableIPV6AssignMode) Get() *IPV6AssignMode {
	return v.value
}

func (v *NullableIPV6AssignMode) Set(val *IPV6AssignMode) {
	v.value = val
	v.isSet = true
}

func (v NullableIPV6AssignMode) IsSet() bool {
	return v.isSet
}

func (v *NullableIPV6AssignMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPV6AssignMode(val *IPV6AssignMode) *NullableIPV6AssignMode {
	return &NullableIPV6AssignMode{value: val, isSet: true}
}

func (v NullableIPV6AssignMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPV6AssignMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


